import numpy as np
#import scipy.stats
import argparse
import time
from datetime import datetime
import sys
import os
import csv
from scipy.stats import t
from scipy import sqrt
from statistics import variance, mean 
def int_ech(values,conf=0.95) :
    n = len(values) 
    m = mean(values) 
    s = variance(values)
    proba = (1-conf)*100 ; proba = (100-proba/2)/100 
    ddl = n - 1
    intervalle = sqrt(s/n) * t.ppf(proba, ddl)
    return m,intervalle
######## ARGS definition ######
parser = argparse.ArgumentParser()
parser.add_argument("--data","-d",help="absolute path of dataset.csv",required=True)
parser.add_argument("--cca","-c",help="cca",required=True)
parser.add_argument("--size","-s",help="file size",required=True)
args = parser.parse_args()
##############################
Data = args.data
size = args.size
cca = args.cca

def mean_confidence_interval(data, confidence=0.95):
    a = 1.0 * np.array(data)
    n = len(a)
    m, se = np.mean(a), scipy.stats.sem(a)
    h = se * scipy.stats.t.ppf((1 + confidence) / 2., n-1)
    return m, h, m-h, m+h


#dataset = pd.read_csv(Data)
i=0
now = datetime.now()
timestamp = datetime.timestamp(now)

f = open(cca+".goodput.95th.csv","w")
f.write("cca,data,duration,error\n")
algo=0
data=''
while i < 1:
    g2c = []
    results = {}
    tr = open(Data,"r")
    csv_reader = csv.reader(tr, delimiter=',')
    j=0
    algo+=1
    for row in csv_reader:
        if (j!=0):
            if str(row[3]) in results.keys():
                results[str(row[3])] = results[str(row[3])].append(float(row[5]))
            else:
                results[str(row[3])] = [float(row[5])]
        j+=1
    g2c = []
    for x in results.keys():
        if results[x] != None:
            g2c.append(max(results[x]))
        #g2c.append(max(results[x]))
    if len(g2c) >= 1:
        m,ci = int_ech(g2c)
        f.write("{},{},{},{}\n".format(cca,str(size)+"MB",m,ci))
    tr.close()
    i+=1
f.close()
